<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://fastsocks.github.io/news/article-32146.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>TensorFlow 模型保存/载入的两种方法</title>
        <meta name="description" content="我们在上线使用一个算法模型的时候，首先必须将已经训练好的模型保存下来。tensorflow保存模型的方式与sklearn不太一样，sklearn很直接，一个sklearn.externals.jobl" />
        <link rel="icon" href="/assets/website/img/fastsocks/favicon.ico" type="image/x-icon"/>
    <link rel="stylesheet" href="/assets/website/css/fastsocks/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-H5R4331M78"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H5R4331M78');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
                        <a class="navbar-brand" href="/">
                <span>Fast Socks</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="#">关于</a> </li>
                    <li class="nav-item"> <a class="nav-link" href="#">联系</a> </li>
                </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <section class="py-5 position-relative">
            <div class="shape-wrap shape-header"><img src="./assets/img/blob-shape-1.svg" alt=""></div>
            <div class="container">
                <div class="row align-items-center text-center text-lg-left mb-5">
                    <div class="col-md-9 col-lg-6 col-xl-5 mb-4 mb-md-5 mb-lg-0">
                        <h1 class="h1">TensorFlow 模型保存/载入的两种方法</h1>
                        <p class="lead">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                    <div class="col-md-9 col-lg-6 col-xl-7 text-center">
                        <img src="/assets/website/img/fastsocks/liramail_dribbble.jpg" alt="liramail_dribbble" class="img-fluid rounded">
                    </div>
                </div>
                <!-- end: -->
            </div>
        </section>
        <div class="container">
            <hr>
        </div>
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <p>我们在上线使用一个算法模型的时候，首先必须将已经训练好的模型保存下来。tensorflow保存模型的方式与sklearn不太一样，sklearn很直接，一个sklearn.externals.joblib的dump与load方法就可以保存与载入使用。而tensorflow由于有graph, operation 这些概念，保存与载入模型稍显麻烦。</p> <h3 id="一基本方法">一、基本方法</h3> <p>网上搜索tensorflow模型保存，搜到的大多是基本的方法。即</p> <h4 id="保存">保存</h4> <ol> <li>定义变量 </li> <li>使用saver.save()方法保存 </li> </ol> <h4 id="载入">载入</h4> <ol> <li>定义变量</li> <li>使用saver.restore()方法载入</li> </ol> <p>如 <strong>保存</strong> 代码如下</p> <pre class="prettyprint"><code class="language-python hljs"> <span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf   <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np    W = tf.Variable([[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]],dtype = tf.float32,name=<span class="hljs-string">'w'</span>)   b = tf.Variable([[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]],dtype = tf.float32,name=<span class="hljs-string">'b'</span>)    init = tf.initialize_all_variables()   saver = tf.train.Saver()   <span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:           sess.run(init)           save_path = saver.save(sess,<span class="hljs-string">"save/model.ckpt"</span>)  </code></pre> <p><strong>载入</strong>代码如下</p> <pre class="prettyprint"><code class="language-python hljs"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf   <span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np    W = tf.Variable(tf.truncated_normal(shape=(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)),dtype = tf.float32,name=<span class="hljs-string">'w'</span>)   b = tf.Variable(tf.truncated_normal(shape=(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)),dtype = tf.float32,name=<span class="hljs-string">'b'</span>)    saver = tf.train.Saver()   <span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:           saver.restore(sess,<span class="hljs-string">"save/model.ckpt"</span>)  </code></pre> <p>这种方法不方便的在于，在使用模型的时候，必须把模型的结构重新定义一遍，然后载入对应名字的变量的值。但是很多时候我们都更希望能够读取一个文件然后就直接使用模型，而不是还要把模型重新定义一遍。所以就需要使用另一种方法。</p> <h3 id="二不需重新定义网络结构的方法">二、不需重新定义网络结构的方法</h3> <h3 id="tftrainimportmetagraph">tf.train.import_meta_graph</h3> <pre class="prettyprint"><code class="language-python hljs">import_meta_graph(     meta_graph_or_file,     clear_devices=<span class="hljs-keyword">False</span>,     import_scope=<span class="hljs-keyword">None</span>,     **kwargs )</code></pre> <p>这个方法可以从文件中将保存的graph的所有节点加载到当前的default graph中，并返回一个saver。也就是说，我们在保存的时候，除了将变量的值保存下来，其实还有将对应graph中的各种节点保存下来，所以模型的结构也同样被保存下来了。</p> <p>比如我们想要保存计算最后预测结果的<code>y</code>，则应该在训练阶段将它添加到collection中。具体代码如下 </p> <h4 id="保存-1">保存</h4> <pre class="prettyprint"><code class="language-python hljs"><span class="hljs-comment">### 定义模型</span> input_x = tf.placeholder(tf.float32, shape=(<span class="hljs-keyword">None</span>, in_dim), name=<span class="hljs-string">'input_x'</span>) input_y = tf.placeholder(tf.float32, shape=(<span class="hljs-keyword">None</span>, out_dim), name=<span class="hljs-string">'input_y'</span>)  w1 = tf.Variable(tf.truncated_normal([in_dim, h1_dim], stddev=<span class="hljs-number">0.1</span>), name=<span class="hljs-string">'w1'</span>) b1 = tf.Variable(tf.zeros([h1_dim]), name=<span class="hljs-string">'b1'</span>) w2 = tf.Variable(tf.zeros([h1_dim, out_dim]), name=<span class="hljs-string">'w2'</span>) b2 = tf.Variable(tf.zeros([out_dim]), name=<span class="hljs-string">'b2'</span>) keep_prob = tf.placeholder(tf.float32, name=<span class="hljs-string">'keep_prob'</span>) hidden1 = tf.nn.relu(tf.matmul(self.input_x, w1) + b1) hidden1_drop = tf.nn.dropout(hidden1, self.keep_prob) <span class="hljs-comment">### 定义预测目标</span> y = tf.nn.softmax(tf.matmul(hidden1_drop, w2) + b2) <span class="hljs-comment"># 创建saver</span> saver = tf.train.Saver(...variables...) <span class="hljs-comment"># 假如需要保存y，以便在预测时使用</span> tf.add_to_collection(<span class="hljs-string">'pred_network'</span>, y) sess = tf.Session() <span class="hljs-keyword">for</span> step <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">1000000</span>):     sess.run(train_op)     <span class="hljs-keyword">if</span> step % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>:         <span class="hljs-comment"># 保存checkpoint, 同时也默认导出一个meta_graph</span>         <span class="hljs-comment"># graph名为'my-model-{global_step}.meta'.</span>         saver.save(sess, <span class="hljs-string">'my-model'</span>, global_step=step)</code></pre> <h4 id="载入-1">载入</h4> <pre class="prettyprint"><code class="language-python hljs"><span class="hljs-keyword">with</span> tf.Session() <span class="hljs-keyword">as</span> sess:   new_saver = tf.train.import_meta_graph(<span class="hljs-string">'my-save-dir/my-model-10000.meta'</span>)   new_saver.restore(sess, <span class="hljs-string">'my-save-dir/my-model-10000'</span>)   <span class="hljs-comment"># tf.get_collection() 返回一个list. 但是这里只要第一个参数即可</span>   y = tf.get_collection(<span class="hljs-string">'pred_network'</span>)[<span class="hljs-number">0</span>]    graph = tf.get_default_graph()    <span class="hljs-comment"># 因为y中有placeholder，所以sess.run(y)的时候还需要用实际待预测的样本以及相应的参数来填充这些placeholder，而这些需要通过graph的get_operation_by_name方法来获取。</span>   input_x = graph.get_operation_by_name(<span class="hljs-string">'input_x'</span>).outputs[<span class="hljs-number">0</span>]   keep_prob = graph.get_operation_by_name(<span class="hljs-string">'keep_prob'</span>).outputs[<span class="hljs-number">0</span>]    <span class="hljs-comment"># 使用y进行预测  </span>   sess.run(y, feed_dict={input_x:....,  keep_prob:<span class="hljs-number">1.0</span>})</code></pre> <p><strong>这里有两点需要注意的：</strong> <br /> 一、 saver.restore()时填的文件名，因为在saver.save的时候，每个checkpoint会保存三个文件，如 <br /><code>my-model-10000.meta</code>, <code>my-model-10000.index</code>, <code>my-model-10000.data-00000-of-00001</code> <br /> 在<code>import_meta_graph</code>时填的就是meta文件名，我们知道权值都保存在<code>my-model-10000.data-00000-of-00001</code>这个文件中，但是如果在restore方法中填这个文件名，就会报错，应该填的是<strong>前缀</strong>，这个前缀可以使用<code>tf.train.latest_checkpoint(checkpoint_dir)</code>这个方法获取。</p> <p>二、模型的y中有用到placeholder，在sess.run()的时候肯定要feed对应的数据，因此还要根据具体placeholder的名字，从graph中使用<code>get_operation_by_name</code>方法获取。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-31665.htm">猫咪疫苗3针打什么疫苗（猫咪疫苗三针分别是什么）</a></p>
                                        <p>下一个：<a href="/news/article-32147.htm">宠物粮食代工（宠物粮食代工一吨2万一贵吗知乎）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-12-26-free-node-subscribe-links.htm" title="12月26日→19.5M/S|2024年最新免费节点Fast Socks订阅链接地址">12月26日→19.5M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-21420.htm" title="Feign远程调用以及Feign的最优使用">Feign远程调用以及Feign的最优使用</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-22-free-node-subscribe.htm" title="10月22日→18M/S|2024年最新免费节点Fast Socks订阅链接地址">10月22日→18M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-26-free-node-subscribe-links.htm" title="9月26日→18.7M/S|2024年最新免费节点Fast Socks订阅链接地址">9月26日→18.7M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-32622.htm" title="成都免费领养宠物的网站（成都正规免费领养宠物）">成都免费领养宠物的网站（成都正规免费领养宠物）</a></li>
                        <li class="py-2"><a href="/news/article-23698.htm" title="兽用疫苗稀释后多久过期不能用（兽用疫苗稀释液的说明书）">兽用疫苗稀释后多久过期不能用（兽用疫苗稀释液的说明书）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-15-node-share-links.htm" title="9月15日→19.5M/S|2024年最新免费节点Fast Socks订阅链接地址">9月15日→19.5M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-22329.htm" title="Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）">Android 12(S) 图像显示系统 &#8211; SurfaceFlinger 之 VSync &#8211; 中篇（十七）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-free-subscribe-node.htm" title="11月5日→19.6M/S|2024年最新免费节点Fast Socks订阅链接地址">11月5日→19.6M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-18691.htm" title="动物医院英语单词 动物医院英语单词怎么写">动物医院英语单词 动物医院英语单词怎么写</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">25</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <hr class="border-2x color-10 my-2">
                    </div>
                    <div class="col-lg-5 mt-4">
                        <p class="color-7 mb-0 pr-md-11 pr-lg-0">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Fast Socks机场节点订阅官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>

        <script src="/assets/website/js/frontend/fastsocks/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/fastsocks/app.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>