<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://fastsocks.github.io/news/article-50308.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>手写Mybatis第5章：数据源的解析、创建和使用</title>
        <meta name="description" content="作者：小傅哥 博客：https://bugstack.cn  沉淀、分享、成长，让自己和他人都能有所收获！????  一、前言 管你吃几碗粉，有流量就行！ 现在我们每天所接收的信息量越来越多，但很多的" />
        <link rel="icon" href="/assets/website/img/fastsocks/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Fast Socks机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://fastsocks.github.io/news/article-50308.htm" />
    <meta property="og:site_name" content="Fast Socks机场节点订阅官网" />
    <meta property="og:title" content="手写Mybatis第5章：数据源的解析、创建和使用" />
    <meta property="og:image" content="https://fastsocks.github.io/uploads/20240906-1/c02b68e5e8c6ed50bc47fd6fdf895c01.webp" />
        <meta property="og:release_date" content="2025-02-03T09:25:15" />
    <meta property="og:updated_time" content="2025-02-03T09:25:15" />
        <meta property="og:description" content="作者：小傅哥 博客：https://bugstack.cn  沉淀、分享、成长，让自己和他人都能有所收获！????  一、前言 管你吃几碗粉，有流量就行！ 现在我们每天所接收的信息量越来越多，但很多的" />
        
    <link rel="stylesheet" href="/assets/website/css/fastsocks/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="手写Mybatis第5章：数据源的解析、创建和使用">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-H5R4331M78"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H5R4331M78');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
                        <a class="navbar-brand" href="/">
                <span>Fast Socks</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="#">关于</a> </li>
                    <li class="nav-item"> <a class="nav-link" href="#">联系</a> </li>
                </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <section class="py-5 position-relative">
            <div class="shape-wrap shape-header"><img src="./assets/img/blob-shape-1.svg" alt=""></div>
            <div class="container">
                <div class="row align-items-center text-center text-lg-left mb-5">
                    <div class="col-md-9 col-lg-6 col-xl-5 mb-4 mb-md-5 mb-lg-0">
                        <h1 class="h1">手写Mybatis第5章：数据源的解析、创建和使用</h1>
                        <p class="lead">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                    <div class="col-md-9 col-lg-6 col-xl-7 text-center">
                        <img src="/assets/website/img/fastsocks/liramail_dribbble.jpg" alt="liramail_dribbble" class="img-fluid rounded">
                    </div>
                </div>
                <!-- end: -->
            </div>
        </section>
        <div class="container">
            <hr>
        </div>
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<p>作者：小傅哥</p> <p>博客：<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://bugstack.cn"  target="_blank" rel="nofollow">https://bugstack.cn</a></p> <blockquote> <p>沉淀、分享、成长，让自己和他人都能有所收获！????</p> </blockquote> <h2 id="一前言">一、前言</h2> <p><code>管你吃几碗粉，有流量就行！</code></p> <p>现在我们每天所接收的信息量越来越多，但很多的个人却没有多少分辨知识的能力。很多知识信息也只是蹭热点的泛知识，但泛知识只是一种空泛、不成系统、甚至可能是错误的信息群，不过就是这样的信息却给内容消费者一种“成功获取了知识”吃饱的幻觉，却丧失了对知识层次的把控。</p> <p>而作为一个本身就很理科的程序员来说，如果都是被泛知识充斥，花费着自己的精力和时间，没有经过足够的脑力思考所吸收的泛技术内容，长期以往是很难有所成长的。</p> <p>以为我个人的成长经历来看，我更愿意花很多的实际来解决一个问题，而不是一片问题。当一个问题解决的足够透彻、清晰、明确以后，再结合着这个知识点所需要的内容继续扩展和深挖。很庆幸当年没有那么多的泛知识内容推送，否则可能我也会被弄的很焦虑！</p> <h2 id="二目标">二、目标</h2> <p>在上一章节我们解析 XML 中的 SQL 配置信息，并在代理对象调用 DefaultSqlSession 中进行获取和打印操作，从整个框架结构来看我们解决了对象的代理、Mapper的映射、SQL的初步解析，那么接下来就应该是连库和执行SQL语句并返回结果了。</p> <p>那么这部分内容就会涉及到解析 XML 中关于 dataSource 数据源信息配置，并建立事务管理和连接池的启动和使用。并将这部分能力在 DefaultSqlSession 执行 SQL 语句时进行调用。但为了不至于在一个章节把整个工程撑大，这里我们会把重点放到解析配置、建立事务框架和引入 DRUID 连接池，以及初步完成 SQL 的执行和结果简单包装上。便于读者先熟悉整个框架结构，在后续章节再陆续迭代和完善框架细节。</p> <h2 id="三设计">三、设计</h2> <p>建立数据源连接池和 JDBC 事务工厂操作，并以 xml 配置数据源信息为入口，在 XMLConfigBuilder 中添加数据源解析和构建操作，向配置类configuration添加 JDBC 操作环境信息。以便在 DefaultSqlSession 完成对 JDBC 执行 SQL 的操作。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/779e5d4b1aff8f5b2ed669beb606b07d.jpg" alt="手写Mybatis第5章：数据源的解析、创建和使用 "></p> <ul> <li>在 parse 中解析 XML DB 链接配置信息，并完成事务工厂和连接池的注册环境到配置类的操作。</li> <li>与上一章节改造 selectOne 方法的处理，不再是打印 SQL 语句，而是把 SQL 语句放到 DB 连接池中进行执行，以及完成简单的结果封装。</li> </ul> <h2 id="四实现">四、实现</h2> <h3 id="1-工程结构">1. 工程结构</h3> <pre><code class="language-java">mybatis-step-04 └── src     ├── main     │   └── java     │       └── cn.bugstack.mybatis     │           ├── binding     │           │   ├── MapperMethod.java     │           │   ├── MapperProxy.java     │           │   ├── MapperProxyFactory.java     │           │   └── MapperRegistry.java     │           ├── builder     │           │   ├── xml     │           │   │   └── XMLConfigBuilder.java     │           │   └── BaseBuilder.java     │           ├── datasource     │           │   ├── druid     │           │   │   └── DruidDataSourceFactory.java     │           │   └── DataSourceFactory.java     │           ├── io     │           │   └── Resources.java     │           ├── mapping     │           │   ├── BoundSql.java     │           │   ├── Environment.java     │           │   ├── MappedStatement.java     │           │   ├── ParameterMapping.java     │           │   └── SqlCommandType.java     │           ├── session     │           │   ├── defaults     │           │   │   ├── DefaultSqlSession.java     │           │   │   └── DefaultSqlSessionFactory.java     │           │   ├── Configuration.java     │           │   ├── SqlSession.java     │           │   ├── SqlSessionFactory.java     │           │   ├── SqlSessionFactoryBuilder.java     │           │   └── TransactionIsolationLevel.java       │           ├── transaction     │           │   ├── jdbc     │           │   │   ├── JdbcTransaction.java     │           │   │   └── JdbcTransactionFactory.java     │           │   ├── Transaction.java     │           │   └── TransactionFactory.java     │           └── type     │               ├── JdbcType.java     │               └── TypeAliasRegistry.java     └── test         ├── java         │   └── cn.bugstack.mybatis.test.dao         │       ├── dao         │       │   └── IUserDao.java         │       ├── po         │       │   └── User.java         │       └── ApiTest.java         └── resources             ├── mapper             │   └──User_Mapper.xml             └── mybatis-config-datasource.xml</code></pre> <p>数据源的解析和使用核心类关系，如图 5-2 所示</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220509/618d95c6ce09010b28cc1c5b553614ef.jpg" alt="手写Mybatis第5章：数据源的解析、创建和使用 "></p> <ul> <li>以事务接口 Transaction  和事务工厂 TransactionFactory 的实现，包装数据源 DruidDataSourceFactory 的功能。这里的数据源连接池我们采用的是阿里的 Druid，暂时还没有实现 Mybatis 的 JNDI 和 Pooled 连接池，这部分可以后续专门以数据源连接池的专项来开发。</li> <li>当所有的数据源相关功能准备好后，就是在 XMLConfigBuilder 解析 XML 配置操作中，对数据源的配置进行解析以及创建出相应的服务，存放到 Configuration 的环境配置中。</li> <li>最后在 DefaultSqlSession#selectOne 方法中完成 SQL 的执行和结果封装，最终就把整个 Mybatis 核心脉络串联出来了。</li> </ul> <h3 id="2-事务管理">2. 事务管理</h3> <p>一次数据库的操作应该具有事务管理能力，而不是通过 JDBC 获取链接后直接执行即可。还应该把控链接、提交、回滚和关闭的操作处理。所以这里我们结合 JDBC 的能力封装事务管理。</p> <h4 id="21-事务接口">2.1 事务接口</h4> <p><strong>详见源码</strong>：<code>cn.bugstack.mybatis.transaction.Transaction</code></p> <pre><code class="language-java">public interface Transaction {      Connection getConnection() throws SQLException;      void commit() throws SQLException;      void rollback() throws SQLException;      void close() throws SQLException;  }</code></pre> <ul> <li>定义标准的事务接口，链接、提交、回滚、关闭，具体可以由不同的事务方式进行实现，包括：JDBC和托管事务，托管事务是交给 Spring 这样的容器来管理。</li> </ul> <p><strong>详见源码</strong>：<code>cn.bugstack.mybatis.transaction.jdbc.JdbcTransaction</code></p> <pre><code class="language-java">public class JdbcTransaction implements Transaction {      protected Connection connection;     protected DataSource dataSource;     protected TransactionIsolationLevel level = TransactionIsolationLevel.NONE;     protected boolean autoCommit;      public JdbcTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit) {         this.dataSource = dataSource;         this.level = level;         this.autoCommit = autoCommit;     }      @Override     public Connection getConnection() throws SQLException {         connection = dataSource.getConnection();         connection.setTransactionIsolation(level.getLevel());         connection.setAutoCommit(autoCommit);         return connection;     }      @Override     public void commit() throws SQLException {         if (connection != null &amp;&amp; !connection.getAutoCommit()) {             connection.commit();         }     }          //...  }</code></pre> <ul> <li>在 JDBC 事务实现类中，封装了获取链接、提交事务等操作，其实使用的也就是 JDBC 本身提供的能力。</li> </ul> <h4 id="22-事务工厂">2.2 事务工厂</h4> <p><strong>详见源码</strong>：<code>cn.bugstack.mybatis.transaction.TransactionFactory</code></p> <pre><code class="language-java">public interface TransactionFactory {      /**      * 根据 Connection 创建 Transaction      * @param conn Existing database connection      * @return Transaction      */     Transaction newTransaction(Connection conn);      /**      * 根据数据源和事务隔离级别创建 Transaction      * @param dataSource DataSource to take the connection from      * @param level Desired isolation level      * @param autoCommit Desired autocommit      * @return Transaction      */     Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);  }</code></pre> <ul> <li>以工厂方法模式包装 JDBC 事务实现，为每一个事务实现都提供一个对应的工厂。与简单工厂的接口包装不同。</li> </ul> <h3 id="3-类型别名注册器">3. 类型别名注册器</h3> <p>在 Mybatis 框架中我们所需要的基本类型、数组类型以及自己定义的事务实现和事务工厂都需要注册到类型别名的注册器中进行管理，在我们需要使用的时候可以从注册器中获取到具体的对象类型，之后在进行实例化的方式进行使用。</p> <h4 id="31-基础注册器">3.1 基础注册器</h4> <p><strong>详见源码</strong>：<code>cn.bugstack.mybatis.type.TypeAliasRegistry</code></p> <pre><code class="language-java">public class TypeAliasRegistry {      private final Map&lt;String, Class&lt;?&gt;&gt; TYPE_ALIASES = new HashMap&lt;&gt;();      public TypeAliasRegistry() {         // 构造函数里注册系统内置的类型别名         registerAlias("string", String.class);          // 基本包装类型         registerAlias("byte", Byte.class);         registerAlias("long", Long.class);         registerAlias("short", Short.class);         registerAlias("int", Integer.class);         registerAlias("integer", Integer.class);         registerAlias("double", Double.class);         registerAlias("float", Float.class);         registerAlias("boolean", Boolean.class);     }      public void registerAlias(String alias, Class&lt;?&gt; value) {         String key = alias.toLowerCase(Locale.ENGLISH);         TYPE_ALIASES.put(key, value);     }      public &lt;T&gt; Class&lt;T&gt; resolveAlias(String string) {         String key = string.toLowerCase(Locale.ENGLISH);         return (Class&lt;T&gt;) TYPE_ALIASES.get(key);     }  }</code></pre> <ul> <li>在 TypeAliasRegistry 类型别名注册器中先做了一些基本的类型注册，以及提供 registerAlias 注册方法和 resolveAlias 获取方法。</li> </ul> <h4 id="32-注册事务">3.2 注册事务</h4> <p><strong>详见源码</strong>：<code>cn.bugstack.mybatis.session.Configuration</code></p> <pre><code class="language-java">public class Configuration {      //环境     protected Environment environment;      // 映射注册机     protected MapperRegistry mapperRegistry = new MapperRegistry(this);      // 映射的语句，存在Map里     protected final Map&lt;String, MappedStatement&gt; mappedStatements = new HashMap&lt;&gt;();      // 类型别名注册机     protected final TypeAliasRegistry typeAliasRegistry = new TypeAliasRegistry();      public Configuration() {         typeAliasRegistry.registerAlias("JDBC", JdbcTransactionFactory.class);         typeAliasRegistry.registerAlias("DRUID", DruidDataSourceFactory.class);     }          //... }</code></pre> <ul> <li>在 Configuration 配置选项类中，添加类型别名注册机，通过构造函数添加 JDBC、DRUID 注册操作。</li> <li>读者应该注意到，整个 Mybatis 的操作都是使用 Configuration 配置项进行串联流程，所以所有内容都会在 Configuration 中进行链接。</li> </ul> <h3 id="4-解析数据源配置">4. 解析数据源配置</h3> <p>通过在 XML 解析器 XMLConfigBuilder 中，扩展对环境信息的解析，我们这里把数据源、事务类内容称为操作 SQL 的环境。解析后把配置信息写入到 Configuration 配置项中，便于后续使用。</p> <p><strong>详见源码</strong>：<code>cn.bugstack.mybatis.builder.xml.XMLConfigBuilder</code></p> <pre><code class="language-java">public class XMLConfigBuilder extends BaseBuilder {             public Configuration parse() {       try {           // 环境           environmentsElement(root.element("environments"));           // 解析映射器           mapperElement(root.element("mappers"));       } catch (Exception e) {           throw new RuntimeException("Error parsing SQL Mapper Configuration. Cause: " + e, e);       }       return configuration;   }        private void environmentsElement(Element context) throws Exception {       String environment = context.attributeValue("default");       List&lt;Element&gt; environmentList = context.elements("environment");       for (Element e : environmentList) {           String id = e.attributeValue("id");           if (environment.equals(id)) {               // 事务管理器               TransactionFactory txFactory = (TransactionFactory) typeAliasRegistry.resolveAlias(e.element("transactionManager").attributeValue("type")).newInstance();               // 数据源               Element dataSourceElement = e.element("dataSource");               DataSourceFactory dataSourceFactory = (DataSourceFactory) typeAliasRegistry.resolveAlias(dataSourceElement.attributeValue("type")).newInstance();               List&lt;Element&gt; propertyList = dataSourceElement.elements("property");               Properties props = new Properties();               for (Element property : propertyList) {                   props.setProperty(property.attributeValue("name"), property.attributeValue("value"));               }               dataSourceFactory.setProperties(props);               DataSource dataSource = dataSourceFactory.getDataSource();               // 构建环境               Environment.Builder environmentBuilder = new Environment.Builder(id)                       .transactionFactory(txFactory)                       .dataSource(dataSource);               configuration.setEnvironment(environmentBuilder.build());           }       }   }  }</code></pre> <ul> <li>以 XMLConfigBuilder#parse 解析扩展对数据源解析操作，在 environmentsElement 方法中包括事务管理器解析和从类型注册器中读取到事务工程的实现类，同理数据源也是从类型注册器中获取。</li> <li>最后把事务管理器和数据源的处理，通过环境构建 Environment.Builder 存放到 Configuration 配置项中，也就可以通过 Configuration 存在的地方都可以获取到数据源了。</li> </ul> <h3 id="5-sql执行和结果封装">5. SQL执行和结果封装</h3> <p>在上一章节中在 DefaultSqlSession#selectOne 只是打印了 XML 中配置的 SQL 语句，现在把数据源的配置加载进来以后，就可以把 SQL 语句放到数据源中进行执行以及结果封装。</p> <p><strong>详见源码</strong>：<code>cn.bugstack.mybatis.session.defaults.DefaultSqlSession</code></p> <pre><code class="language-java">public class DefaultSqlSession implements SqlSession {      private Configuration configuration;      public DefaultSqlSession(Configuration configuration) {         this.configuration = configuration;     }      @Override     public &lt;T&gt; T selectOne(String statement, Object parameter) {         try {             MappedStatement mappedStatement = configuration.getMappedStatement(statement);             Environment environment = configuration.getEnvironment();              Connection connection = environment.getDataSource().getConnection();              BoundSql boundSql = mappedStatement.getBoundSql();             PreparedStatement preparedStatement = connection.prepareStatement(boundSql.getSql());             preparedStatement.setLong(1, Long.parseLong(((Object[]) parameter)[0].toString()));             ResultSet resultSet = preparedStatement.executeQuery();              List&lt;T&gt; objList = resultSet2Obj(resultSet, Class.forName(boundSql.getResultType()));             return objList.get(0);         } catch (Exception e) {             e.printStackTrace();             return null;         }     }          // ...  }</code></pre> <ul> <li>在 selectOne 方法中获取 Connection 数据源链接，并简单的执行 SQL 语句，并对执行的结果进行封装处理。</li> <li>因为目前这部分主要是为了大家串联出整个功能结构，所以关于 SQL 的执行、参数传递和结果封装都是写死的，后续我们进行扩展。</li> </ul> <h2 id="六测试">六、测试</h2> <h3 id="1-事先准备">1. 事先准备</h3> <h4 id="11-创建库表">1.1 创建库表</h4> <p>创建一个数据库名称为 mybatis 并在库中创建表 user 以及添加测试数据，如下：</p> <pre><code class="language-sql">CREATE TABLE     USER     (         id bigint NOT NULL AUTO_INCREMENT COMMENT '自增ID',         userId VARCHAR(9) COMMENT '用户ID',         userHead VARCHAR(16) COMMENT '用户头像',         createTime TIMESTAMP NULL COMMENT '创建时间',         updateTime TIMESTAMP NULL COMMENT '更新时间',         userName VARCHAR(64),         PRIMARY KEY (id)     )     ENGINE=InnoDB DEFAULT CHARSET=utf8;      insert into user (id, userId, userHead, createTime, updateTime, userName) values (1, '10001', '1_04', '2022-04-13 00:00:00', '2022-04-13 00:00:00', '小傅哥');</code></pre> <h4 id="2-配置数据源">2. 配置数据源</h4> <pre><code class="language-xml">&lt;environments default="development"&gt;     &lt;environment id="development"&gt;         &lt;transactionManager type="JDBC"/&gt;         &lt;dataSource type="DRUID"&gt;             &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt;             &lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/mybatis?useUnicode=true"/&gt;             &lt;property name="username" value="root"/&gt;             &lt;property name="password" value="123456"/&gt;         &lt;/dataSource&gt;     &lt;/environment&gt; &lt;/environments&gt;</code></pre> <ul> <li>通过<code>mybatis-config-datasource.xml</code> 配置数据源信息，包括：driver、url、username、password</li> <li>另外这里要注意下，DataSource 配置的是 DRUID，因为我们实现的是这个数据源的处理方式。</li> </ul> <h4 id="3-配置mapper">3. 配置Mapper</h4> <pre><code class="language-xml">&lt;select id="queryUserInfoById" parameterType="java.lang.Long" resultType="cn.bugstack.mybatis.test.po.User"&gt;     SELECT id, userId, userName, userHead     FROM user     where id = #{id} &lt;/select&gt;</code></pre> <ul> <li>Mapper 的配置内容在上一章节的解析学习中已经做了配置，本章节做了简单的调整。</li> </ul> <h3 id="2-单元测试">2. 单元测试</h3> <pre><code class="language-java">@Test public void test_SqlSessionFactory() throws IOException {     // 1. 从SqlSessionFactory中获取SqlSession     SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsReader("mybatis-config-datasource.xml"));     SqlSession sqlSession = sqlSessionFactory.openSession();          // 2. 获取映射器对象     IUserDao userDao = sqlSession.getMapper(IUserDao.class);          // 3. 测试验证     User user = userDao.queryUserInfoById(1L);     logger.info("测试结果：{}", JSON.toJSONString(user)); }</code></pre> <ul> <li>单元测试没有什么改变，仍是通过 SqlSessionFactory 中获取 SqlSession 并获得映射对象和执行方法调用。</li> </ul> <p><strong>测试结果</strong></p> <pre><code class="language-java">22:34:18.676 [main] INFO  c.alibaba.druid.pool.DruidDataSource - {dataSource-1} inited 22:34:19.286 [main] INFO  cn.bugstack.mybatis.test.ApiTest - 测试结果：{"id":1,"userHead":"1_04","userId":"10001","userName":"小傅哥"}  Process finished with exit code 0</code></pre> <ul> <li>从现在的测试结果已经可以看出，通过我们对数据源的解析、包装和使用，已经可以对 SQL 语句进行执行和包装返回的结果信息了。</li> <li>读者在学习的过程中可以调试下代码，看看每一步都是如何完成执行步骤的，也在这个过程中进行学习 Mybatis 框架的设计技巧。</li> </ul> <h2 id="七总结">七、总结</h2> <ul> <li>以解析 XML 配置解析为入口，添加数据源的整合和包装，引出事务工厂对 JDBC 事务的处理，并加载到环境配置中进行使用。</li> <li>那么通过数据源的引入就可以在 DefaultSqlSession 中从 Configuration 配置引入环境信息，把对应的 SQL 语句提交给 JDBC 进行处理并简单封装结果数据。</li> <li>结合本章节建立起来的框架结构，数据源、事务、简单的SQL调用，下个章节将继续这部分内容的扩展处理，让整个功能模块逐渐完善。</li> </ul> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-49788.htm">宠物领养送养平台app（宠物领养免费送到家）</a></p>
                                        <p>下一个：<a href="/news/article-50309.htm">中国农业大学动物医院营业时间（中国农业大学动物医院值班表）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-28349.htm" title="vue项目刷新页面报404">vue项目刷新页面报404</a></li>
                        <li class="py-2"><a href="/news/article-43338.htm" title="动物医院资质要求是什么内容呀（符合动物医院法定条件）">动物医院资质要求是什么内容呀（符合动物医院法定条件）</a></li>
                        <li class="py-2"><a href="/news/article-31665.htm" title="猫咪疫苗3针打什么疫苗（猫咪疫苗三针分别是什么）">猫咪疫苗3针打什么疫苗（猫咪疫苗三针分别是什么）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-free-subscribe-node.htm" title="11月5日→19.6M/S|2024年最新免费节点Fast Socks订阅链接地址">11月5日→19.6M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-41353.htm" title="kubectl的安装和设置命令补全（linux和win10）">kubectl的安装和设置命令补全（linux和win10）</a></li>
                        <li class="py-2"><a href="/news/article-33578.htm" title="猫咪三针疫苗打完多久可以打狂犬针（猫咪三针疫苗打完多久可以打狂犬针疫苗）">猫咪三针疫苗打完多久可以打狂犬针（猫咪三针疫苗打完多久可以打狂犬针疫苗）</a></li>
                        <li class="py-2"><a href="/news/article-31664.htm" title="宠物粮食加工厂设备有哪些厂家生产的 宠物粮食加工厂设备有哪些厂家生产的呢">宠物粮食加工厂设备有哪些厂家生产的 宠物粮食加工厂设备有哪些厂家生产的呢</a></li>
                        <li class="py-2"><a href="/news/article-20957.htm" title="东北农大研究生官网（东北农业大学研究生官网）">东北农大研究生官网（东北农业大学研究生官网）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-10-node-share-links.htm" title="11月10日→20.9M/S|2024年最新免费节点Fast Socks订阅链接地址">11月10日→20.9M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-20-free-high-speed-nodes.htm" title="11月20日→21M/S|2024年最新免费节点Fast Socks订阅链接地址">11月20日→21M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">15</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <hr class="border-2x color-10 my-2">
                    </div>
                    <div class="col-lg-5 mt-4">
                        <p class="color-7 mb-0 pr-md-11 pr-lg-0">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Fast Socks机场节点订阅官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>

        <script src="/assets/website/js/frontend/fastsocks/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/fastsocks/app.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>