<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://fastsocks.github.io/news/article-58620.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>C++ String类的简单实现</title>
        <meta name="description" content="在之前c语言的学习中，对于字符串我们很难像整型和其他变量那样进行比较和直接的复制或者定义去运用。但在C++中为了解决这个问题提供了一种类，String类，以类型的形式对字符串进行封装，它除了作为储存字" />
        <link rel="icon" href="/assets/website/img/fastsocks/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Fast Socks机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://fastsocks.github.io/news/article-58620.htm" />
    <meta property="og:site_name" content="Fast Socks机场节点订阅官网" />
    <meta property="og:title" content="C++ String类的简单实现" />
    <meta property="og:image" content="https://fastsocks.github.io/uploads/20240906-1/00d31cfde6b2673e3cc520c7d1bd8e8b.webp" />
        <meta property="og:release_date" content="2025-02-18T09:44:22" />
    <meta property="og:updated_time" content="2025-02-18T09:44:22" />
        <meta property="og:description" content="在之前c语言的学习中，对于字符串我们很难像整型和其他变量那样进行比较和直接的复制或者定义去运用。但在C++中为了解决这个问题提供了一种类，String类，以类型的形式对字符串进行封装，它除了作为储存字" />
        
    <link rel="stylesheet" href="/assets/website/css/fastsocks/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="C++ String类的简单实现">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-H5R4331M78"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H5R4331M78');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
                        <a class="navbar-brand" href="/">
                <span>Fast Socks</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/client.htm">客户端</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <section class="py-5 position-relative">
            <div class="shape-wrap shape-header"><img src="./assets/img/blob-shape-1.svg" alt=""></div>
            <div class="container">
                <div class="row align-items-center text-center text-lg-left mb-5">
                    <div class="col-md-9 col-lg-6 col-xl-5 mb-4 mb-md-5 mb-lg-0">
                        <h1 class="h1">C++ String类的简单实现</h1>
                        <p class="lead">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                    <div class="col-md-9 col-lg-6 col-xl-7 text-center">
                        <img src="/assets/website/img/fastsocks/liramail_dribbble.jpg" alt="liramail_dribbble" class="img-fluid rounded">
                    </div>
                </div>
                <!-- end: -->
            </div>
        </section>
        <div class="container">
            <hr>
        </div>
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p><strong>在之前c语言的学习中，对于字符串我们很难像整型和其他变量那样进行比较和直接的复制或者定义去运用。但在C++中为了解决这个问题提供了一种类，String类，以类型的形式对字符串进行封装，它除了作为储存字符的容器外，可以对字序列的一系列操作。</strong></p> <p><strong>下面我们对String类进行简单的模拟实现：</strong></p> <pre><code>namespace wjx { 	class string 	{ 	public: 	private: 		char* _str; 	};</code></pre> <p>首先，我们定义一个自己的命名空间，来实现我们的string类，定义初始数据char*类型的_str来作为string类中的数据。</p> <pre><code>string(const char* str) 			:_str(new char[strlen(str) + 1]) 		{ 			strcpy(_str, str); 		}</code></pre> <p>我们先来实现String类中的构造函数，首先计算出所加字符串的长度，为原有数据_str开辟空间，此处+1是为了放置'\0'方便操作，开辟空间后将str通过strcpy函数复制给_str，完成构造。</p> <pre><code>string(const string&amp; s) 			:_str(new char[strlen(s._str)+1]) 		{ 			strcpy(_str, s._str); 		} ~string() 		{ 			delete[] _str; 			_str = nullptr; 		}</code></pre> <p>上述为实现string类的拷贝构造函数(深拷贝)和析构函数，一个类中如果没有定义拷贝构造函数，就会调用默认的拷贝构造函数。而拷贝构造分为深浅拷贝，下图为<span style="color:#fe2c24;">深浅拷贝</span>的底层实现：</p> <p>&nbsp;<img fetchpriority="high" decoding="async" alt="" height="409" src="http://img.555519.xyz/uploads/20230108/5861e568176d0a7e00e1e4fd86389e5b.jpg"></p> <p>&nbsp;在我们没有定义拷贝构造函数时，系统会调用默认的拷贝构造函数，string s1("hello world"),string s2(s1),如上图所示系统默认的拷贝构造函数为普通的传值拷贝，所以s1与s2指向同一块空间，但当出作用域时，调用析构函数，s1指向的空间被释放，s2则指向空，所以程序会崩溃。</p> <p style="text-align:center;"><img decoding="async" alt="" height="230" src="http://img.555519.xyz/uploads/20230108/25473469b8e98fcabed07ac3e7a994ba.jpg"></p> <p>&nbsp;但当我们使用深拷贝时，则不会出现那样的情况，因为我们在定义深拷贝函数时，会首先开辟一个与要拷贝字符串等长的空间，再将其复制过去，所以s1与s2指向的位置是不同的，析构函数释放时是互不影响的，所以这就是深浅拷贝的区别。</p> <p>下面为赋值运算符重载的方法：</p> <pre><code>string&amp; operator=(const string&amp; s) 		{ 			if (this != &amp;s) 			{ 				char* tmp = new char[strlen(s._str) + 1]; 				strcpy(tmp, s._str); 				delete[] _str; 				_str = tmp; 			} 			return *this; 		}</code></pre> <p>上述代码为赋值运算符重载，当我们调用赋值运算符重载时，需要先开辟一个空间用来复制需要拷贝的字符串，再通过释放原来的空间并用成员变量指向新的空间，从而达到赋值。注意的是if (this != &amp;s)是需要区别s1=s1时的情况的，不能自己给自己赋值。</p> <p><strong>下面为拷贝构造函数和赋值运算符函数的现代写法：</strong></p> <pre><code>string(const string&amp; s)//拷贝构造函数现代写法 			:_str(nullptr) 		{ 			string tmp(s._str); 			swap(_str, tmp._str); 		}  string&amp; operator=(const string&amp; s)//赋值运算符重载的现代写法 		{ 			 if (this != &amp;s) 			 { 				 string tmp(s); 				 swap(_str, tmp._str); 			 } 			 return *this; 		}</code></pre> <p>现代写法对于之前的传统写法来说，对于拷贝构造函数，传统方法需要申请新空间，但现代版本不需要，直接创造一个对象，因为对象被创建后，数据的底层空间已经被开辟出来了，直接可以通过交换来实现拷贝构造；而对于赋值运算符重载来说传统版本需要申请和释放空间，而新版本利用创建对象和交换函数来直接实现。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-57912.htm">动物诊疗许可证去哪里办手续（动物诊疗许可证在哪里办理）</a></p>
                                        <p>下一个：<a href="/news/article-58621.htm">嵌入式Linux开发-根文件系统NFS网络挂载</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-19124.htm" title="广州宠物领养平台官网电话是多少号（广州宠物领养微信群）">广州宠物领养平台官网电话是多少号（广州宠物领养微信群）</a></li>
                        <li class="py-2"><a href="/news/article-26045.htm" title="vue在安装时 node-sass报错">vue在安装时 node-sass报错</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-31-free-node-subscribe.htm" title="12月31日→18.7M/S|2025年最新免费节点Fast Socks订阅链接地址">12月31日→18.7M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-25-free-node-subscribe.htm" title="1月25日→22M/S|2025年最新免费节点Fast Socks订阅链接地址">1月25日→22M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-30715.htm" title="一个高频问题：异步操作会创建线程吗？">一个高频问题：异步操作会创建线程吗？</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-26-free-node-subscribe-links.htm" title="12月26日→19.5M/S|2024年最新免费节点Fast Socks订阅链接地址">12月26日→19.5M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-5-free-subscribe-node.htm" title="11月5日→19.6M/S|2024年最新免费节点Fast Socks订阅链接地址">11月5日→19.6M/S|2024年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-45804.htm" title="Shiro介绍及解析">Shiro介绍及解析</a></li>
                        <li class="py-2"><a href="/news/article-22790.htm" title="动物注射方法有哪几种（动物注射方法有哪几种）">动物注射方法有哪几种（动物注射方法有哪几种）</a></li>
                        <li class="py-2"><a href="/news/article-38881.htm" title="济南宠物免费赠送信息（济南宠物领养济南宠物赠送）">济南宠物免费赠送信息（济南宠物领养济南宠物赠送）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">60</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <hr class="border-2x color-10 my-2">
                    </div>
                    <div class="col-lg-5 mt-4">
                        <p class="color-7 mb-0 pr-md-11 pr-lg-0">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Fast Socks机场节点订阅官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>

        <script src="/assets/website/js/frontend/fastsocks/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/fastsocks/app.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>