<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://fastsocks.github.io/news/article-92432.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>关于Feign的几个问题</title>
        <meta name="description" content="本文来说下关于Feign 的几个问题   文章目录  概述 什么是 Feign 什么是 Open Feign Feign 和 Openfeign 的区别   Starter Openfeign   环" />
        <link rel="icon" href="/assets/website/img/fastsocks/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Fast Socks机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://fastsocks.github.io/news/article-92432.htm" />
    <meta property="og:site_name" content="Fast Socks机场节点订阅官网" />
    <meta property="og:title" content="关于Feign的几个问题" />
    <meta property="og:image" content="https://fastsocks.github.io/uploads/20240906-1/fb11e5c2542198124301cb7c8ca66a3a.webp" />
        <meta property="og:release_date" content="2025-04-10T08:15:49" />
    <meta property="og:updated_time" content="2025-04-10T08:15:49" />
        <meta property="og:description" content="本文来说下关于Feign 的几个问题   文章目录  概述 什么是 Feign 什么是 Open Feign Feign 和 Openfeign 的区别   Starter Openfeign   环" />
        
    <link rel="stylesheet" href="/assets/website/css/fastsocks/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="关于Feign的几个问题">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-H5R4331M78"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H5R4331M78');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
                        <a class="navbar-brand" href="/">
                <span>Fast Socks</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/client.htm">客户端</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <section class="py-5 position-relative">
            <div class="shape-wrap shape-header"><img src="./assets/img/blob-shape-1.svg" alt=""></div>
            <div class="container">
                <div class="row align-items-center text-center text-lg-left mb-5">
                    <div class="col-md-9 col-lg-6 col-xl-5 mb-4 mb-md-5 mb-lg-0">
                        <h1 class="h1">关于Feign的几个问题</h1>
                        <p class="lead">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                    <div class="col-md-9 col-lg-6 col-xl-7 text-center">
                        <img src="/assets/website/img/fastsocks/liramail_dribbble.jpg" alt="liramail_dribbble" class="img-fluid rounded">
                    </div>
                </div>
                <!-- end: -->
            </div>
        </section>
        <div class="container">
            <hr>
        </div>
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> <blockquote> <p>本文来说下关于Feign 的几个问题</p> </blockquote> <div class="toc"> <h3>文章目录</h3> <ul> <li><a href="#_5" rel="nofollow">概述</a></li> <li><a href="#_Feign_27" rel="nofollow">什么是 Feign</a></li> <li><a href="#_Open_Feign_35" rel="nofollow">什么是 Open Feign</a></li> <li><a href="#Feign__Openfeign__91" rel="nofollow">Feign 和 Openfeign 的区别</a></li> <li> <ul> <li><a href="#Starter_Openfeign_105" rel="nofollow">Starter Openfeign</a></li> </ul> </li> <li><a href="#_124" rel="nofollow">环境准备</a></li> <li> <ul> <li><a href="#_132" rel="nofollow">生产者服务</a></li> <li><a href="#_158" rel="nofollow">消费者服务</a></li> </ul> </li> <li><a href="#Feign__196" rel="nofollow">Feign 的启动原理</a></li> <li> <ul> <li><a href="#Import_225" rel="nofollow">注入@Import</a></li> <li><a href="#_262" rel="nofollow">添加全局配置</a></li> <li><a href="#_FeignClient__272" rel="nofollow">注册 FeignClient 接口</a></li> </ul> </li> <li><a href="#Feign__288" rel="nofollow">Feign 的工作原理</a></li> <li> <ul> <li><a href="#FactoryBean__297" rel="nofollow">FactoryBean 接口特征</a></li> <li><a href="#_344" rel="nofollow">初始化父子容器</a></li> <li><a href="#_374" rel="nofollow">动态代理生成</a></li> </ul> </li> <li><a href="#Feign__440" rel="nofollow">Feign 如何负载均衡</a></li> <li><a href="#_457" rel="nofollow">本文小结</a></li> </ul> </div> <hr/> </h1> <p><strong>Feign是Netflix开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API</strong>。</p> <p>什么是Fegin，在解释之前，我们先梳理一下我们之前学习到的，在微服模式下，解决服务间的调用可以通过Grpc、HttpClient、（<strong>Spring中的RestTemplate是对HttpClient的封装</strong>）等开源框架，这种调用我们称之为远程过程的调用，即RPC，那么进行RPC调用需要解决几个重要的问题，一个是序列化/反序列化，比如Json/xml等怎样序列化和反序列化等，再一个就是以什么样的协议实现这样的调用。这两个问题在开源社区都有了很好的技术方案。</p> <p><strong>那么Spring Cloud Fegin主要是为了更简单的实现开发，封装了Http的调用流程，更适合面向接口化编程的习惯</strong>。我们虽然能通过Ribbon和RestTemplate通过URL进行远程调用，但是这样拼接参数，并不是特别的优雅，为此，我们可以通过使用Feign让远程调用变的更简洁。</p> <blockquote> <p><strong>Feign是一个声明式的Web Service客户端</strong>。</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/b51c33a4422aa376899737faa70d8ede.jpg" alt="关于Feign的几个问题"><br /> 现在的微服务在互联网圈子里应用已经相关广泛了，SpringCloud 是微服务领域当之无愧的 “头牌”。加上现在的一些轮子项目，新建一个全套的 SpringCloud 项目分分钟的事情，而我们要做的事情，就是不把认知停留在使用层面，所以要深入到源码中去理解 SpringCloud，为什么要选择 OpenFiegn？ 因为它足够的 “小”，Feign 的源代码中，Java 代码才 3w 多行，放眼现在热门的开源项目，包括不限于 Dubbo、Nacos、Skywalking 中 Java 代码都要 30w 行起步。</p> <blockquote> <p>通过本篇文章，希望读者朋友可以掌握如下知识</p> </blockquote> <ul> <li>什么是 Feign</li> <li>Feign 和 Openfeign 的区别</li> <li>OpenFeign 的启动原理</li> <li>OpenFeign 的工作原理</li> <li>OpenFeign 如何负载均衡</li> </ul> <hr/> </h1> <blockquote> <p>Feign 是声明式 Web 服务客户端，它使编写 Web 服务客户端更加容易。Feign 不做任何请求处理，通过处理注解相关信息生成 Request，并对调用返回的数据进行解码，从而实现 简化 HTTP API 的开发。</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/cc7f3f75e92258e703e76257a9d4c61b.jpg" alt="关于Feign的几个问题"></p> <hr/> </h1> <p><strong>有了 Eureka ，RestTemplate ，Ribbon， 我们就可以愉快地进行服务间的调用了，但是使用 RestTemplate 还是不方便，我们每次都要进行这样的调用</strong>。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span><span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span><span class="token comment">// 这里是提供者A的ip地址，但是如果使用了 Eureka 那么就应该是提供者A的名称</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> SERVICE_PROVIDER_A<span class="token operator">=</span><span class="token string">"http://localhost:8081"</span><span class="token punctuation">;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/judge"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">String</span> url<span class="token operator">=</span> SERVICE_PROVIDER_A<span class="token operator">+</span><span class="token string">"/service1"</span><span class="token punctuation">;</span><span class="token comment">// 是不是太麻烦了？？？每次都要 url、请求、返回类型的</span><span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> request<span class="token punctuation">,</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p><strong>这样每次都调用 RestTemplate 的 API 是否太麻烦，我能不能像调用原来代码一样进行各个服务间的调用呢？聪明的同学肯定想到了，那就用 映射 呀，就像域名和IP地址的映射。我们可以将被调用的服务代码映射到消费者端，这样我们就可以 无缝开发啦</strong>。</p> <blockquote> <p>OpenFeign 也是运行在消费者端的，使用 Ribbon 进行负载均衡，所以 OpenFeign 直接内置了 Ribbon。</p> </blockquote> <p><strong>在导入了 Open Feign 之后我们就可以进行愉快编写 Consumer 端代码了</strong>。</p> <pre><code class="prism language-java"><span class="token comment">// 使用 @FeignClient 注解来指定提供者的名字</span><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"eureka-client-provider"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">TestClient</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这里一定要注意需要使用的是提供者那端的请求相对路径，这里就相当于映射了</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/provider/xxx"</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token class-name">CommonResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Plan</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token function">getPlans</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> planGetRequest request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p><strong>然后我们在 Controller 就可以像原来调用 Service 层代码一样调用它了</strong>。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">TestController</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 这里就相当于原来自动注入的 Service</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span><span class="token class-name">TestClient</span> testClient<span class="token punctuation">;</span><span class="token comment">// controller 调用 service 层代码</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/test"</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">CommonResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Plan</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> planGetRequest request<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> testClient<span class="token punctuation">.</span><span class="token function">getPlans</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <hr/> </h1> <p><strong>Feign 最早是由 Netflix 公司进行维护的，后来 Netflix 不再对其进行维护，最终 Feign 由社区进行维护，更名为 Openfeign</strong>。</p> <blockquote> <p>为了少打几个字，下文简称 Opefeign 为 Feign</p> </blockquote> <p>并将原项目迁移至新的仓库，所以我们在 Github 上看到 Feign 的坐标如下</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></code></pre> <hr/> <h2><a id="Starter_Openfeign_105" rel="nofollow"></a>Starter Openfeign</h2> <p>当然了，基于 SpringCloud 团队对 Netflix 的情有独钟，你出了这么好用的轻量级 HTTP 客户端，我这老大哥不得支持一下，所以就有了基于 Feign 封装的 Starter。</p> <pre><code class="prism language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></code></pre> <p>Spring Cloud 添加了对 Spring MVC 注解的支持，并支持使用 Spring Web 中默认使用的相同 HttpMessageConverters。</p> <p>另外，Spring Cloud 老大哥同时集成了 Ribbon 和 Eureka 以及 Spring Cloud LoadBalancer，以在使用 Feign 时提供负载均衡的 HTTP 客户端。</p> <blockquote> <p>针对于注册中心的支持，包含但不限于 Eureka，比如 Consul、Naocs 等注册中心均支持</p> </blockquote> <p><strong>在我们 SpringCloud 项目开发过程中，使用的大多都是这个 Starter Feign</strong>。</p> <hr/> </h1> <p>为了方便大家理解，这里写出对应的生产方、消费方 Demo 代码，以及使用的注册中心。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/40471743e2a768814dd3277f24352f84.jpg" alt="关于Feign的几个问题"><br /> 注册中心使用的 Nacos，生产、消费方代码都比较简单。另外为了阅读体验感，文章原则是少放源码，更多的是给大家梳理核心逻辑。</p> <hr/> <h2><a id="_132" rel="nofollow"></a>生产者服务</h2> <blockquote> <p>添加 Nacos 服务注册发现注解以及发布出 HTTP 接口服务</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">NacosProduceApplication</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NacosProduceApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">static</span><span class="token keyword">class</span><span class="token class-name">TestController</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token string">"hello "</span><span class="token operator">+</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <hr/> <h2><a id="_158" rel="nofollow"></a>消费者服务</h2> <blockquote> <p>定义 FeignClient 消费服务接口</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"nacos-produce"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">interface</span><span class="token class-name">DemoFeignClient</span><span class="token punctuation">{<!-- --></span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/hello"</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token class-name">String</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <blockquote> <p>因为生产者使用 Nacos，所以消费者除了开启 Feign 注解，同时也要开启 Naocs 服务注册发现</p> </blockquote> <pre><code class="prism language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">NacosConsumeApplication</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NacosConsumeApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span><span class="token class-name">DemoFeignClient</span> demoFeignClient<span class="token punctuation">;</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">String</span> result<span class="token operator">=</span> demoFeignClient<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <hr/> </h1> <p>我们在 SpringCloud 的使用过程中，如果想要启动某个组件，一般都是 @Enable… 这种方式注入，Feign 也不例外，我们需要在类上标记此注解<strong>@EnableFeignClients</strong>。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">Application</span><span class="token punctuation">{<!-- --></span><span class="token keyword">public</span><span class="token keyword">static</span><span class="token keyword">void</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p><strong>继续深入看一下注解内部都做了什么。注解内部的方法就不说明了，不加会有默认的配置，感兴趣可以跟下源码</strong>。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">FeignClientsRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token annotation punctuation">@interface</span><span class="token class-name">EnableFeignClients</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre> <p><strong>前三个注解看着平平无奇，重点在第四个 @Import 上，一般使用此注解都是想要动态注册 Spring Bean 的</strong>。</p> <hr/> <h2><a id="Import_225" rel="nofollow"></a>注入@Import</h2> <p><strong>通过名字也可以大致猜出来，这是 Feign 注册 Bean 使用的，使用到了 Spring 相关的接口，一起看下起了什么作用</strong>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/45bcf86ec8f20e5e6892a39531541ecb.jpg" alt="关于Feign的几个问题"><br /> ResourceLoaderAware、EnvironmentAware 为 FeignClientsRegistrar 中两个属性 resourceLoader、environment 赋值，对 Spring 了解的小伙伴理解问题不大。</p> <p>ImportBeanDefinitionRegistrar 负责动态注入 IOC Bean，分别注入 Feign 配置类、FeignClient Bean。</p> <pre><code class="prism language-java"><span class="token comment">// 资源加载器，可以加载 classpath 下的所有文件</span><span class="token keyword">private</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">;</span><span class="token comment">// 上下文，可通过该环境获取当前应用配置属性等</span><span class="token keyword">private</span><span class="token class-name">Environment</span> environment<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token operator">=</span> environment<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 注册 ＠EnableFeignClients 提供的自定义配置类中的相关 Bean 实例</span><span class="token function">registerDefaultConfiguration</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 扫描 packge，注册被 @FeignClient 修饰的接口类为 IOC Bean</span><span class="token function">registerFeignClients</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <hr/> <h2><a id="_262" rel="nofollow"></a>添加全局配置</h2> <blockquote> <p>registerDefaultConfiguration 方法流程如下</p> </blockquote> <ol> <li>获取 @EnableFeignClients 注解上的属性以及对应 Value</li> <li>生成 FeignClientSpecification（存储 Feign 中的配置类） 对应的构造器 BeanDefinitionBuilder</li> <li>FeignClientSpecification Bean 名称为 default. + @EnableFeignClients 修饰类全限定名称 + FeignClientSpecification</li> <li>@EnableFeignClients defaultConfiguration 默认为 {}，如果没有相关配置，默认使用<strong>FeignClientsConfiguration</strong> 并结合 name 填充到 FeignClientSpecification，最终注册为 IOC Bean</li> </ol> <hr/> <h2><a id="_FeignClient__272" rel="nofollow"></a>注册 FeignClient 接口</h2> <blockquote> <p>将重点放在 registerFeignClients 上，该方法主要就是将修饰了 @FeignClient 的接口注册为 IOC Bean</p> </blockquote> <ol> <li>扫描 @EnableFeignClients 注解，如果有 clients，则加载指定接口，为空则根据 scanner 规则扫描出修饰了 @FeignClient 的接口</li> <li>获取 @FeignClient 上对应的属性，根据 configuration 属性去创建接口级的 FeignClientSpecification 配置类 IOC Bean</li> <li>将 @FeignClient 的属性设置到 FeignClientFactoryBean 对象上，并注册 IOC Bean</li> </ol> <p>@FengnClient 修饰的接口实际上使用了 Spring 的代理工厂生成代理类，所以这里会把修饰了 @FeignClient 接口的 BeanDefinition 设置为 FeignClientFactoryBean 类型，而 FeignClientFactoryBean 继承自 FactoryBean。</p> <p>也就是说，当我们定义 @FeignClient 修饰接口时，注册到 IOC 容器中 Bean 类型变成了 FeignClientFactoryBean。</p> <p>在 Spring 中，FactoryBean 是一个工厂 Bean，用来创建代理 Bean。工厂 Bean 是一种特殊的 Bean，对于需要获取 Bean 的消费者而言，它是不知道 Bean 是普通 Bean 或是工厂 Bean 的。工厂 Bean 返回的实例不是工厂 Bean 本身，而是会返回执行了工厂 Bean 中 FactoryBean#getObject 逻辑的实例。</p> <hr/> </h1> <p>说 Feign 的工作原理，核心点围绕在被 @FeignClient 修饰的接口，如何发送及接收 HTTP 网络请求。</p> <p>上面说到 @FeignClient 修饰的接口最终填充到 IOC 容器的类型是<strong>FeignClientFactoryBean</strong>，先来看下它是什么</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/82f3fb71ab50904f528e3bfeb04bb3b9.jpg" alt="关于Feign的几个问题"></p> <hr/> <h2><a id="FactoryBean__297" rel="nofollow"></a>FactoryBean 接口特征</h2> <blockquote> <p>这里说一下 FeignClientFactoryBean 都有哪些特征</p> </blockquote> <ol> <li>它会在类初始化时执行一段逻辑，依据 Spring InitializingBean 接口</li> <li>如果它被别的类 @Autowired 进行注入，返回的不是它本身，而是 FactoryBean#getObject 返回的类，依据 Spring FactoryBean 接口</li> <li>它能够获取 Spring 上下文对象，依据 Spring ApplicationContextAware 接口</li> </ol> <p><strong>先来看它的初始化逻辑都执行了什么</strong></p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>contextId<span class="token punctuation">,</span><span class="token string">"Context id must be set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token string">"Name must be set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>没有特别的操作，只是使用断言工具类判断两个字段不为空。ApplicationContextAware 也没什么说的，获取上下文对象赋值到对象的局部变量里，重点以及关键就是<strong>FactoryBean#getObject</strong> 方法。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span><span class="token class-name">Object</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">Exception</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>getTarget 源码方法还是挺长的，这里采用分段的形式展示</p> <pre><code class="prism language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token class-name">T</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 从 IOC 容器获取 FeignContext</span><span class="token class-name">FeignContext</span> context<span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">FeignContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过 context 创建 Feign 构造器</span><span class="token class-name">Feign<span class="token punctuation">.</span>Builder</span> builder<span class="token operator">=</span><span class="token function">feign</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre> <p>这里提出一个疑问？FeignContext 什么时候、在哪里被注入到 Spring 容器里的？</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/b92c1101213060c0cf96187abb499a8e.jpg" alt="关于Feign的几个问题"></p> <p>看到图片小伙伴就明了了，用了 SpringBoot 怎么会不使用自动装配的功能呢，FeignContext 就是在 FeignAutoConfiguration 中被成功创建</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/c8e0d9816c8a697ac73ae4a518e27281.jpg" alt="关于Feign的几个问题"></p> <hr/> <h2><a id="_344" rel="nofollow"></a>初始化父子容器</h2> <p>feign 方法里日志工厂、编码、解码等类均是通过 get(…) 方法得到</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/3f82472e375ced1568bff0b8d6336210.jpg" alt="关于Feign的几个问题"><br /><strong>这里涉及到 Spring 父子容器的概念，默认子容器 Map 为空</strong>，获取不到服务名对应 Context 则新建。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/d9d2b5526175a866fe77e095546f2c0a.jpg" alt="关于Feign的几个问题"><br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/18d3fddb48fe5cdde063e940ef14fa46.jpg" alt="关于Feign的几个问题"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/9c1b3e81abc6b859980fbb529cf1bb13.jpg" alt="关于Feign的几个问题"><br /> 默认注册如下，FeignClientsConfiguration 是由创建 FeignContext 调用父类 Super 构造方法传入的</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/d54505bc9e18b4c0ae56e3ff4b75bc05.jpg" alt="关于Feign的几个问题"></p> <blockquote> <p>关于父子类容器对应关系，以及提供 @FeignClient 服务对应子容器的关系（每一个服务对应一个子容器实例）</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/49769849227e75be47cd407cfb6d11e0.jpg" alt="关于Feign的几个问题"><br /> 回到 getInstance 方法，子容器此时已加载对应 Bean，直接通过 getBean 获取<strong>FeignLoggerFactory</strong>。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/0fc88ecf9f4b6fc461e4834375988009.jpg" alt="关于Feign的几个问题"></p> <p>如法炮制，Feign.Builder、Encoder、Decoder、Contract 都可以通过子容器获取对应 Bean</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/70a5f40521aea7ae92270fe43fd6d83a.jpg" alt="关于Feign的几个问题"></p> <p><strong>configureFeign 方法主要进行一些配置赋值，比如超时、重试、404 配置等，就不再细说赋值代码了</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/e36e97d2d629da7f4ec5d5d3d51f49b9.jpg" alt="关于Feign的几个问题"></p> <hr/> <h2><a id="_374" rel="nofollow"></a>动态代理生成</h2> <blockquote> <p><strong>继续嗑，上面都是开胃菜，接下来是最最最重要的地方了，小板凳坐板正了</strong>…</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/8a5dc67101dfba20244eeaaa91430e28.jpg" alt="关于Feign的几个问题"><br /><strong>因为我们在 @FeignClient 注解是使用 name 而不是 url，所以会执行负载均衡策略的分支</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/e0823ba33f221c466de9f392ac498f53.jpg" alt="关于Feign的几个问题"><br /> Client： Feign 发送请求以及接收响应等都是由 Client 完成，该类默认 Client.Default，另外支持 HttpClient、OkHttp 等客户端。</p> <p>代码中的 Client、Targeter 在自动装配时注册，配合上文中的父子容器理论，这两个 Bean 在父容器中存在</p> <p>因为我们并没有对 Hystix 进行设置，所以走入此分支</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/a99198d48ded8c07a93fd001501c44a7.jpg" alt="关于Feign的几个问题"><br /> 创建反射类 ReflectiveFeign，然后执行创建实例类</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/05fe7cffd386855d1f3bad64010d6c55.jpg" alt="关于Feign的几个问题"><br /> newInstance 方法对 @FeignClient 修饰的接口中 SpringMvc 等配置进行解析转换，对接口类中的方法进行归类，生成动态代理类</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/f48d1be137d882e0346a4b00907a5158.jpg" alt="关于Feign的几个问题"><br /><strong>可以看出 Feign 创建动态代理类的方式和 Mybatis Mapper 处理方式是一致的，因为两者都没有实现类。</strong></p> <blockquote> <p><strong>根据 newInstance 方法按照行为大致划分，共做了四件事</strong></p> </blockquote> <ol> <li>处理 @FeignCLient 注解（SpringMvc 注解等）封装为 MethodHandler 包装类</li> <li>遍历接口中所有方法，过滤 Object 方法，并将默认方法以及 FeignClient 方法分类</li> <li>创建动态代理对应的 InvocationHandler 并创建 Proxy 实例</li> <li>接口内 default 方法 绑定动态代理类</li> </ol> <p>MethodHandler 将方法参数、方法返回值、参数集合、请求类型、请求路径进行解析存储</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/bb1b2b8c0c548291003a8d452f34f63f.jpg" alt="关于Feign的几个问题"><br /><strong>到这里我们也就可以 Feign 的工作方式了。前面那么多封装铺垫，封装个性化配置等等，最终确定收尾的是创建动态代理类</strong></p> <blockquote> <p><strong>也就是说在我们调用 @FeignClient 接口时，会被 FeignInvocationHandler#invoke 拦截，并在动态代理方法中执行下述逻辑</strong></p> </blockquote> <ol> <li>接口注解信息封装为 HTTP Request</li> <li>通过 Ribbon 获取服务列表，并对服务列表进行负载均衡调用（服务名转换为 ip+port）</li> <li>请求调用后，将返回的数据封装为 HTTP Response，继而转换为接口中的返回类型</li> </ol> <p>既然已经明白了调用流程，那就正儿八经的试一哈，试过才知有没有…</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/52532d0a0c5792bf081e06e8b39300ba.jpg" alt="关于Feign的几个问题"><br /><strong>RequestTemplate</strong>：构建 Request 模版类</p> <p><strong>Options</strong>：存放连接、超时时间等配置类</p> <p><strong>Retryer</strong>：失败重试策略类</p> <blockquote> <p>重试这一块逻辑看了很多遍，但是怎么看，一个 continue 关键字放到 while 的最后面都有点多余…</p> </blockquote> <p>执行远端调用逻辑中使用到了<strong>Rxjava （响应式编程）</strong>，可以看到通过底层获取 server 后将服务名称转变为 ip+port 的方式</p> <p><strong>这种响应式编程的方式在 SpringCloud 中很常见，Hystix 源码底层也有使用</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/1efda40c2b29a2135e1d0ae3814cbb97.jpg" alt="关于Feign的几个问题"><br /> 网络调用默认使用<strong>HttpURLConnection</strong>，可以配置使用 HttpClient 或者 OkHttp</p> <p>调用远端服务后，再将返回值解析正常返回，到这里一个完成的 Feign 调用链就聊明白了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/f0211719a6ee5eb3d28595651171ca86.jpg" alt="关于Feign的几个问题"></p> <hr/> </h1> <blockquote> <p>一般而言，我们生产者注册多个服务，消费者调用时需要使用负载均衡从中 选取一个健康并且可用的生产者服务。</p> </blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/aed2c2095e11fa936846148fe4a390af.jpg" alt="关于Feign的几个问题"><br /><strong>因为 Feign 内部集成 Ribbon，所以也支持此特性，一起看下它是怎么做的</strong></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/335f9fdec576c8f20abe3de01ac2a301.jpg" alt="关于Feign的几个问题"><br /> 我们在 Nacos 上注册了两个服务，端口号 8080、8081。在获取负载均衡器时就可以获取服务集合</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/b5f533c4a515562030fba8982bd6ee1c.jpg" alt="关于Feign的几个问题"><br /> 然后通过 chooseServer 方法选择一个健康实例返回，后面会新出一篇文章对 Ribbon 的负载均衡详细说明</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/ecdab31ac74612b3046fabc52baa7a2a.jpg" alt="关于Feign的几个问题"><br /> 通过返回的 Server 替换 URL 中的服务名，最后使用网络调用服务进行远端调用，完美的一匹.。</p> <hr/> </h1> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220602/ea58ddc8d5a13358a3824dc849c510fa.jpg" alt="关于Feign的几个问题"></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-91711.htm">宠物医院好评文案通用模板（宠物医院评价文案）</a></p>
                                        <p>下一个：<a href="/news/article-92433.htm">动物医院前台工作（动物医院前台工作流程）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-81549.htm" title="合肥宠物救助领养中心 合肥宠物救助领养中心电话">合肥宠物救助领养中心 合肥宠物救助领养中心电话</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-4-node-share.htm" title="3月4日→18.9M/S|2025年最新免费节点Fast Socks订阅链接地址">3月4日→18.9M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-4-free-subscribe-node.htm" title="4月4日→21.1M/S|2025年最新免费节点Fast Socks订阅链接地址">4月4日→21.1M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-8-free-node-subscribe-links.htm" title="3月8日→19.7M/S|2025年最新免费节点Fast Socks订阅链接地址">3月8日→19.7M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-78804.htm" title="Zookeeper java客户端API常规应用">Zookeeper java客户端API常规应用</a></li>
                        <li class="py-2"><a href="/news/article-80883.htm" title="mysql timestamp_MySQL中的时间字段的几种数据类型比较">mysql timestamp_MySQL中的时间字段的几种数据类型比较</a></li>
                        <li class="py-2"><a href="/news/article-81548.htm" title="公务员2021年国考报名时间（2021公务员考试国考报名时间）">公务员2021年国考报名时间（2021公务员考试国考报名时间）</a></li>
                        <li class="py-2"><a href="/news/article-75397.htm" title="宠物粮市场分析报告怎么写好（宠物粮市场销售渠道）">宠物粮市场分析报告怎么写好（宠物粮市场销售渠道）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-10-node-share.htm" title="4月10日→19.5M/S|2025年最新免费节点Fast Socks订阅链接地址">4月10日→19.5M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-86542.htm" title="猫的灵性有多可怕（养猫要背负猫的因果）">猫的灵性有多可怕（养猫要背负猫的因果）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">88</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <hr class="border-2x color-10 my-2">
                    </div>
                    <div class="col-lg-5 mt-4">
                        <p class="color-7 mb-0 pr-md-11 pr-lg-0">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Fast Socks机场节点订阅官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>

        <script src="/assets/website/js/frontend/fastsocks/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/fastsocks/app.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>