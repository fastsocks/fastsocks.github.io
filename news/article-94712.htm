<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://fastsocks.github.io/news/article-94712.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Python3通过字符串访问与修改局部变量</title>
        <meta name="description" content="在Python中定义一个函数时，就会把变量空间划分为全局变量(global)与局部变量(local)，如果是定义在一个类的成员函数中，那么就还有额外的成员变量(self)空间。那么，如果在实际操作中，" />
        <link rel="icon" href="/assets/website/img/fastsocks/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Fast Socks机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://fastsocks.github.io/news/article-94712.htm" />
    <meta property="og:site_name" content="Fast Socks机场节点订阅官网" />
    <meta property="og:title" content="Python3通过字符串访问与修改局部变量" />
    <meta property="og:image" content="https://fastsocks.github.io/uploads/20240906-1/697e8800f5d731b1f8485450f9fcd868.webp" />
        <meta property="og:release_date" content="2025-04-13T07:18:03" />
    <meta property="og:updated_time" content="2025-04-13T07:18:03" />
        <meta property="og:description" content="在Python中定义一个函数时，就会把变量空间划分为全局变量(global)与局部变量(local)，如果是定义在一个类的成员函数中，那么就还有额外的成员变量(self)空间。那么，如果在实际操作中，" />
        
    <link rel="stylesheet" href="/assets/website/css/fastsocks/app.css">
    <link href="https://fonts.googleapis.com/css?family=Nunito:300,400,500,600,700,800,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://maxcdn.icons8.com/fonts/line-awesome/1.1/css/line-awesome-font-awesome.min.css">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Python3通过字符串访问与修改局部变量">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-H5R4331M78"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-H5R4331M78');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <nav class="navbar navbar-expand-lg fixed-top py-3 navbar-light" id="mainNav">
        <div class="container"> 
                        <a class="navbar-brand" href="/">
                <span>Fast Socks</span>
            </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation"> <span class="navbar-toggler-icon"></span> </button>
            <div class="collapse navbar-collapse" id="navbarResponsive">
                <ul class="navbar-nav ml-auto">
                                        <li class="nav-item"> <a class="nav-link" href="/">首页</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/free-nodes/">免费节点</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/paid-subscribe/">推荐机场</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/client.htm">客户端</a> </li>
                                        <li class="nav-item"> <a class="nav-link" href="/news/">新闻资讯</a> </li>
                                    </ul>
            </div>
        </div>
    </nav>
    <main role="main">
        <section class="py-5 position-relative">
            <div class="shape-wrap shape-header"><img src="./assets/img/blob-shape-1.svg" alt=""></div>
            <div class="container">
                <div class="row align-items-center text-center text-lg-left mb-5">
                    <div class="col-md-9 col-lg-6 col-xl-5 mb-4 mb-md-5 mb-lg-0">
                        <h1 class="h1">Python3通过字符串访问与修改局部变量</h1>
                        <p class="lead">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                    <div class="col-md-9 col-lg-6 col-xl-7 text-center">
                        <img src="/assets/website/img/fastsocks/liramail_dribbble.jpg" alt="liramail_dribbble" class="img-fluid rounded">
                    </div>
                </div>
                <!-- end: -->
            </div>
        </section>
        <div class="container">
            <hr>
        </div>
        <div class="container py-5">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>在Python中定义一个函数时，就会把变量空间划分为全局变量(global)与局部变量(local)，如果是定义在一个类的成员函数中，那么就还有额外的成员变量(self)空间。那么，如果在实际操作中，想把这几种不同的变量空间做一个分离的话，有没有办法呢？</p> </h1> <p>首先来看一下局部变量的读取，一般有<code>locals()</code>、<code>vars()</code>和<code>sys._getframe(0).f_code.co_varnames</code>这几种方法，另外有一种<code>sys._getframe(0).f_locals</code>的方法，其实等价于<code>locals()</code>，相关的实现代码如下：</p> <pre><code class="language-python">x = 0  class Obj:     def __init__(self,y):         self.func(y)              def func(y, z=1):         m = 2         print (locals())         print (vars())         print (__import__('sys')._getframe(0).f_code.co_varnames)  if __name__ == '__main__':     Obj(2)</code></pre> <p>该代码的运行结果如下：</p> <pre><code class="language-bash">{'self': &lt;__main__.Obj object at 0x7f5cf5e74e50&gt;, 'y': 2, 'z': 1, 'm': 2} {'self': &lt;__main__.Obj object at 0x7f5cf5e74e50&gt;, 'y': 2, 'z': 1, 'm': 2} ('self', 'y', 'z', 'm')</code></pre> <p>在vars方法不加具体变量名的时候，就是等价于locals方法，两者返回的结果都是字典格式。如果是一个类中的成员函数下执行locals或者vars，会附带一个<code>__main__.Obj object</code>的变量，相当于所有self的成员变量，其实也是局部变量的一部分。而如果使用<code>co_varnames</code>的方法，那么得到的就是所有局部变量的名称，我们也可以在例子中额外定义一个self的成员变量：</p> <pre><code class="language-python">x = 0  class Obj:     def __init__(self, y):         self.p = 5         self.func(y)      def func(self, y, z=1):         m = 2         print(locals())         print(vars())         print(__import__('sys')._getframe(0).f_code.co_varnames)  if __name__ == '__main__':     Obj(2)     # {'self': &lt;__main__.Obj object at 0x7fe9aac0ce50&gt;, 'y': 2, 'z': 1, 'm': 2}     # {'self': &lt;__main__.Obj object at 0x7fe9aac0ce50&gt;, 'y': 2, 'z': 1, 'm': 2}     # ('self', 'y', 'z', 'm')</code></pre> <p>可以发现，所有的成员变量都被放在了self中。并且需要注意的是，<strong>全局变量<code>x</code>自始至终都没有在局部变量中出现</strong>。那么既然我们可以通过这种方式分离出局部变量，或者是局部变量的名称，那我们如何去调整或者修改这些局部变量呢？首先我们需要知道，<code>locals()</code>方法返回的变量是一个copy，也就是说即使修改了locals方法返回的结果，也不能真正的改变局部变量本身的值，这样描述可能有点抽象，我们直接看下这个案例：</p> <pre><code class="language-python">x = 0  class Obj:     def __init__(self,y):         self.func(y)      def func(self, y, z=1):         m = 2         vars()['z']=2         locals()['n']=3         print (locals())         print (z)  if __name__ == '__main__':     Obj(2)</code></pre> <p>在这个案例中分别通过vars方法和locals方法去修改局部变量的值，最终的输出结果如下：</p> <pre><code class="language-bash">{'self': &lt;__main__.Obj object at 0x7f74d9470e50&gt;, 'y': 2, 'z': 1, 'm': 2, 'n': 3} 1</code></pre> <p>首先要解释一下为什么这个案例中没有打印<code>n</code>这个变量，前面提到vars和locals的返回值都是真实变量的一个copy，因此我们不管是修改也好，新增也好，内容不会同步到变量空间中去，也就是说，此时的局部变量n还是处于一个没有定义的状态，只是在locals或者vars的字典中存在，此时打印只会报错NameError。而z的最终打印输出是1，这表明z的值确实没有受到对vars的变量修改的影响。那到底有没有办法可以通过字符串去修改局部变量呢（不同步到全局变量）？答案是有的，但是这个方案非常的hacky，请看如下示例：</p> <pre><code class="language-python">import ctypes  x = 0  class Obj:     def __init__(self,y):         self.func(y)      def func(self, y, z=1):         m = 2         __import__('sys')._getframe(0).f_locals.update({             'z': 2,'n': 3         })         ctypes.pythonapi.PyFrame_LocalsToFast(             ctypes.py_object(__import__('sys')._getframe(0)), ctypes.c_int(0))         print (locals())         print (z)  if __name__ == '__main__':     Obj(2)</code></pre> <p>这个案例是使用了Cython的方案直接去修改了数据帧的内容，而这里所使用的f_locals其实本质上就是locals。经过一番运行，输出结果如下：</p> <pre><code class="language-bash">{'self': &lt;__main__.Obj object at 0x7fea2e2 a1e80&gt;, 'y': 2, 'z': 2, 'm': 2, 'n': 3} 2</code></pre> <p>此时局部变量z是被成功修改了的，但是在前面提到的，即使我们通过这种方法修改了局部变量的值，但是依然不能通过这个方案去创建一个新的局部变量，此时去执行<code>print (n)</code>的话，依然会有报错提示。</p> </h1> <p>相比于修改局部变量，其实查看修改全局变量要显的更加容易。首先我们用一个示例演示一下如何查看所有的全局变量：</p> <pre><code class="language-python">x = 0  class Obj:     def __init__(self,y):         self.func(y)      def func(self, y, z=1):         m = 2         print (globals())  if __name__ == '__main__':     Obj(2)</code></pre> <p>获取局部变量的方式有很多，但是获取全局变量一般就是globals或者等价的f_globals。上述代码执行输出如下：</p> <pre><code class="language-bash">{'__name__': '__main__', '__doc__': None, '__package__': None,  '__loader__': &lt;_frozen_importlib_external.SourceFileLoader object at 0x7f202632ac40&gt;,  '__spec__': None, '__annotations__': {}, '__builtins__': &lt;module 'builtins' (built-in)&gt;,  '__file__': 'xxx.py', '__cached__': None, 'x': 0, 'Obj': &lt;class '__main__.Obj'&gt;}</code></pre> <p>用这种方法我们发现了全局变量x，而在同一个函数内的几个局部变量，就没有显示在globals的key中。而不同于locals变量的是，globals函数返回的是一个真实的数据，是可以直接修改，并且在全局生效的。比如我们在函数内定义或者修改全局变量：</p> <pre><code class="language-python">x = 0  class Obj:     def __init__(self,y):         self.func(y)      def func(self, y, z=1):         global m         m = 2         globals()['x']=3  if __name__ == '__main__':     Obj(2)     print(globals()['x'])     print(globals()['m'])     # 3     # 2</code></pre> <p>在这个例子中我们就可以发现，不仅仅是修改的x值生效了，新建的m也同步到了全局变量中，这样就可以比较容易的划分全局变量和局部变量再进行统一赋值或者修改。</p> </h1> <p>在python中每一个定义的object都有一个隐藏属性<code>__dict__</code>，这是一个字典，其中包含了所有的成员变量名和成员变量值。在前一篇<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://www.cnblogs.com/dechinphy/p/dict-class.html"  target="_blank" rel="nofollow">博客</a>中，我们就介绍了通过__dict__去给类中的成员变量进行赋值，非常的方便。我们可以通过一个示例来看看__dict__中所包含的内容：</p> <pre><code class="language-python">x = 0  class Obj:     def __init__(self,y):         self.m = 2         self.func(y)      def func(self, y, z=1):         print (self.__dict__)  if __name__ == '__main__':     Obj(2)     # {'m': 2}</code></pre> <p>从输出结果中我们就可以看到，__dict__输出的内容非常的纯净，就是所有的成员变量名和变量值。而成员变量虽然是一个对象的属性，但是其操作方式跟全局变量globals是非常接近的，不像locals一样只读，具体示例如下：</p> <pre><code class="language-python">x = 0  class Obj:     def __init__(self,y):         self.m = 2         self.func(y)      def func(self, y, z=1):         self.m = 5         self.__dict__['n'] = 6         print (self.__dict__)         print (self.m, self.n)  if __name__ == '__main__':     Obj(2)     # {'m': 5, 'n': 6}     # 5     # 6</code></pre> <p>在这个案例中，我们修改了成员变量的值，也使用__dict__新建了一个成员变量的值，可以看到最终都有同步到变量空间中，这样就完成了成员变量的修改。</p> </h1> <p>Python本身是一门比较灵活便捷的编程语言，但是便捷往往有可能伴随着一些风险，比如exec和eval等内置函数的实现，有可能导致sandbox escaping的问题。而有时候我们又需要一些批量化的操作，比如批量化的创建或者修改局部、全局或者是成员变量，这样就需要我们首先要把所有的变量名存成字符串，在需要的时候再作为变量名去调用。在这篇文章中，我们介绍了一系列非exec和eval的操作（并不是说没有风险，也引用了ctype和sys定义的数据帧），来查看和定义、修改所需的各种变量。</p> <ol></ol> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-94191.htm">广州宠物领养中心有哪些地址 广州宠物领养中心有哪些地址和电话</a></p>
                                        <p>下一个：<a href="/news/article-94714.htm">广州领养宠物猫 广州领养宠物猫的地方</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-69437.htm" title="Java实现最小高度树_java">Java实现最小高度树_java</a></li>
                        <li class="py-2"><a href="/news/article-80170.htm" title="动物疫苗打一次管多长时间啊多少钱 动物疫苗打一次管多长时间啊多少钱啊">动物疫苗打一次管多长时间啊多少钱 动物疫苗打一次管多长时间啊多少钱啊</a></li>
                        <li class="py-2"><a href="/news/article-88003.htm" title="宠物猫驱虫药多少钱一盒（猫咪驱虫剂多少钱）">宠物猫驱虫药多少钱一盒（猫咪驱虫剂多少钱）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-29-node-share.htm" title="3月29日→20.6M/S|2025年最新免费节点Fast Socks订阅链接地址">3月29日→20.6M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-22-node-share-links.htm" title="3月22日→23M/S|2025年最新免费节点Fast Socks订阅链接地址">3月22日→23M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-94190.htm" title="宠物医院好评模板100字内容图片 宠物医院好评模板100字内容图片大全">宠物医院好评模板100字内容图片 宠物医院好评模板100字内容图片大全</a></li>
                        <li class="py-2"><a href="/news/article-72710.htm" title="面试问题：SpringMVC的执行流程">面试问题：SpringMVC的执行流程</a></li>
                        <li class="py-2"><a href="/news/article-76751.htm" title="动物疫苗检测的方法有哪些（动物疫苗抗体检测）">动物疫苗检测的方法有哪些（动物疫苗抗体检测）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-15-node-share-links.htm" title="3月15日→22.8M/S|2025年最新免费节点Fast Socks订阅链接地址">3月15日→22.8M/S|2025年最新免费节点Fast Socks订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-92432.htm" title="关于Feign的几个问题">关于Feign的几个问题</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">47</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">88</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
                <footer class="pt-4 pb-5 bg-light position-relative">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <hr class="border-2x color-10 my-2">
                    </div>
                    <div class="col-lg-5 mt-4">
                        <p class="color-7 mb-0 pr-md-11 pr-lg-0">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Fast Socks机场节点订阅官网</a> 版权所有 Powered by WordPress
                        </p>
                    </div>
                </div>
                <!--/.row-->
            </div>
            <!--/.container-->
        </footer>

        <script src="/assets/website/js/frontend/fastsocks/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
        <script src="https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
        <script src="/assets/website/js/frontend/fastsocks/app.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>